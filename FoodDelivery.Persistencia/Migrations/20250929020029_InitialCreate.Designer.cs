// <auto-generated />
using System;
using FoodDelivery.Persistencia.Repositorios;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodDelivery.Persistencia.Migrations
{
    [DbContext(typeof(FoodDeliveryDbContext))]
    [Migration("20250929020029_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Adicional", b =>
                {
                    b.Property<int>("IdAdicional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_adicionales");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAdicional"));

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("NombreAdicional")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_adicional");

                    b.Property<decimal?>("PrecioAdicional")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_adicional");

                    b.HasKey("IdAdicional");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("adicionales");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_categoria");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategoria"));

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_categoria");

                    b.HasKey("IdCategoria");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("categorias");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Cliente", b =>
                {
                    b.Property<Guid>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_cliente");

                    b.Property<string>("EmailCliente")
                        .HasColumnType("text")
                        .HasColumnName("email_cliente");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_cliente");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<string>("TelefonoCliente")
                        .HasColumnType("text")
                        .HasColumnName("telefono_cliente");

                    b.Property<string>("Usuario")
                        .HasColumnType("text")
                        .HasColumnName("usuario");

                    b.HasKey("IdCliente");

                    b.ToTable("clientes");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.DetallePedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .HasColumnType("integer")
                        .HasColumnName("id_pedido");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_unitario");

                    b.HasKey("IdPedido", "IdProducto");

                    b.HasIndex("IdProducto");

                    b.ToTable("detalle_pedidos");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.DireccionCliente", b =>
                {
                    b.Property<int>("IdDireccionCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_direccion_cliente");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDireccionCliente"));

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("calle");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_postal");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uuid")
                        .HasColumnName("id_cliente");

                    b.Property<decimal?>("Latitud")
                        .HasColumnType("numeric")
                        .HasColumnName("latitud");

                    b.Property<decimal?>("Longitud")
                        .HasColumnType("numeric")
                        .HasColumnName("longitud");

                    b.Property<int>("Numero")
                        .HasColumnType("integer")
                        .HasColumnName("numero");

                    b.Property<string>("PisoDepto")
                        .HasColumnType("text")
                        .HasColumnName("piso_depto");

                    b.Property<string>("Referencia")
                        .HasColumnType("text")
                        .HasColumnName("referencia");

                    b.HasKey("IdDireccionCliente");

                    b.HasIndex("IdCliente");

                    b.ToTable("direcciones_cliente");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Empresa", b =>
                {
                    b.Property<Guid>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EstaAbierta")
                        .HasColumnType("boolean")
                        .HasColumnName("esta_abierta");

                    b.Property<decimal?>("Latitud")
                        .HasColumnType("numeric")
                        .HasColumnName("latitud");

                    b.Property<decimal?>("Longitud")
                        .HasColumnType("numeric")
                        .HasColumnName("longitud");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telefono");

                    b.Property<string>("Usuario")
                        .HasColumnType("text")
                        .HasColumnName("usuario");

                    b.HasKey("IdEmpresa");

                    b.ToTable("empresas");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_pedido");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPedido"));

                    b.Property<int>("Entrega")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_entrega");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado_pedido");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_hora");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uuid")
                        .HasColumnName("id_cliente");

                    b.Property<int?>("IdDireccionCliente")
                        .HasColumnType("integer")
                        .HasColumnName("id_direccion_cliente");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metodo_pago");

                    b.Property<decimal>("TotalPedido")
                        .HasColumnType("numeric")
                        .HasColumnName("total_pedido");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdDireccionCliente");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("pedidos");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.PedidoAdicionales", b =>
                {
                    b.Property<int>("IdAdicional")
                        .HasColumnType("integer")
                        .HasColumnName("id_adicional");

                    b.Property<int>("IdDetallePedido")
                        .HasColumnType("integer")
                        .HasColumnName("id_detalle_pedido");

                    b.Property<int?>("Mitad")
                        .HasColumnType("integer")
                        .HasColumnName("mitad");

                    b.Property<int?>("PedidoIdPedido")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PrecioAdicionalPersonalizado")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_adicional_personalizado");

                    b.HasKey("IdAdicional", "IdDetallePedido");

                    b.HasIndex("PedidoIdPedido");

                    b.HasIndex("IdDetallePedido", "IdAdicional");

                    b.ToTable("pedido_adicionales");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdProducto"));

                    b.Property<string>("DescripcionProducto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion_producto");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("integer")
                        .HasColumnName("id_categoria");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("text")
                        .HasColumnName("imagen_url");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_producto");

                    b.Property<decimal>("PrecioProducto")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_producto");

                    b.HasKey("IdProducto");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("productos");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Adicional", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Modelos.Empresa", "Empresa")
                        .WithMany("Adicionales")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Categoria", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Modelos.Empresa", "Empresa")
                        .WithMany("Categorias")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.DetallePedido", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Modelos.Pedido", "Pedido")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Modelos.Producto", "Producto")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.DireccionCliente", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Modelos.Cliente", "Cliente")
                        .WithMany("Direcciones")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Pedido", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Modelos.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Modelos.DireccionCliente", "DireccionEntrega")
                        .WithMany()
                        .HasForeignKey("IdDireccionCliente");

                    b.HasOne("FoodDelivery.Domain.Modelos.Empresa", "Empresa")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("DireccionEntrega");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.PedidoAdicionales", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Modelos.Adicional", "Adicional")
                        .WithMany("PedidoAdicionales")
                        .HasForeignKey("IdAdicional")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Modelos.Pedido", null)
                        .WithMany("PedidosAdicionales")
                        .HasForeignKey("PedidoIdPedido");

                    b.HasOne("FoodDelivery.Domain.Modelos.DetallePedido", "DetallePedido")
                        .WithMany("PedidoAdicionales")
                        .HasForeignKey("IdDetallePedido", "IdAdicional")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adicional");

                    b.Navigation("DetallePedido");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Producto", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Modelos.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Modelos.Empresa", "Empresa")
                        .WithMany("Productos")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Adicional", b =>
                {
                    b.Navigation("PedidoAdicionales");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Cliente", b =>
                {
                    b.Navigation("Direcciones");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.DetallePedido", b =>
                {
                    b.Navigation("PedidoAdicionales");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Empresa", b =>
                {
                    b.Navigation("Adicionales");

                    b.Navigation("Categorias");

                    b.Navigation("Pedidos");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Pedido", b =>
                {
                    b.Navigation("DetallePedidos");

                    b.Navigation("PedidosAdicionales");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Modelos.Producto", b =>
                {
                    b.Navigation("DetallePedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
